name: Create Release on Version Change

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write
  discussions: write

jobs:
   release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions-ecosystem/action-get-merged-pull-request@v1
        id: get-merged-pull-request
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-release-label@v1
        id: release-label
        if: ${{ steps.get-merged-pull-request.outputs.title != null }}
        with:
          
          labels: ${{ steps.get-merged-pull-request.outputs.labels }}

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        if: ${{ steps.release-label.outputs.level != null }}
        with:
          semver_only: true
      - name: Get previous and current version
        id: versions
        run: |
          echo "PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r '.version')" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        if: ${{ steps.release-label.outputs.level != null }}
        with:
          current_version: ${{ env.CURRENT_VERSION }}
          level: ${{ steps.release-label.outputs.level }}
      - name: Bump Version of package.json
        uses: ramonpaolo/bump-version@v2.3.1
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        with:
          tag:  ${{ steps.bump-semver.outputs.new_version }}
          commit: true
          branch_to_push: 'main'
         
     

   sea-action:
    name: Build SEA
    needs: release
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        os: [ubuntu-latest , windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: "22"
        cache: npm

    - name: Find Node
      id: find-node
      run:
        echo "node=$(node -e 'console.log(process.argv[0]);')" >>
        $env:GITHUB_OUTPUT
    - name: "build"   
      run: 
       npx pnpm i && node build.js

    - name: SEA
      id: sea
      uses: bryopsida/node-sea-action@v1
      with:
        working-dir: .
        output-dir: build
        executable-name: adminpanel
        sea-config-path: sea-config.json
        node-path: ${{ steps.find-node.outputs.node }}

    - uses: actions/upload-artifact@v4
      with:
        name: adminpanel-${{ matrix.os }}
        path: build/
        if-no-files-found: error

   release-file:
    needs: sea-action
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
      discussions: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'

    - name: Get previous and current version
      id: versions
      run: |
        echo "PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r '.version')" >> $GITHUB_ENV
        echo "CURRENT_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

    - name: Check if version has changed
      id: check
      run: |
        if [ "$PREVIOUS_VERSION" != "$CURRENT_VERSION" ]; then
          echo "Version has changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_ENV
        else
          echo "Version has not changed"
          echo "changed=false" >> $GITHUB_ENV
        fi
   
    - name: Download artifact
      id: list
      uses: actions/download-artifact@v4
      with:
          path: ./release
    - run: dir -R ./release 
    - name: list
      uses: the-coding-turtle/ga-file-list@v0.2
      with:
          directory: "release"
    - run: echo ${{steps.list.outputs.files}}
    - name: Create Release
     
      uses: softprops/action-gh-release@v2.2.1
      with:
        name: ${{ env.CURRENT_VERSION }}
        tag_name: ${{ env.CURRENT_VERSION }}
        files: |
          ./release/adminpanel-windows-latest/adminpanel.exe
          ./release/adminpanel-ubuntu-latest/adminpanel
        generate_release_notes: true
        discussion_category_name: release
